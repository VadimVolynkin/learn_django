
# ============================================================================
# АТРИБУТЫ МОДЕЛИ
# ============================================================================

objects
# Менеджер по умолчанию, доступен в классе и экземпляре.
# Это интерфейс, через который Django выполняет запросы к БД и получает объекты.
# Менеджер можно переопределить: в классе указать new_manager = models.Manager()
# Каждый неабстрактный класс Model должен иметь экземпляр класса Manager. 

# ============================================================================
# МЕТОДЫ МОДЕЛИ
# ============================================================================
# Методы модели работают с конкретной записью в таблице.
# Встроенные методы можно переопределять, добавляя новое поведение.
# Переопределенные методы модели не вызываются при множественных операциях:
# - bulk при массовом удалении объектов через QuerySet
# - при каскадном удалении
# Для гарантированного выполнения действий после удаления объекта используйте сигналы:
# - pre_delete 
# - post_delete

# К сожалению, вы не сможете изменить логику сохранения объектов при использовании creating или updating, так как save(), pre_save и post_save не будут выполнены.

__str__()
# Метод Python, возвращает строковое представление любого объекта.

get_absolute_url()
# Формирует URL для объекта. 
# Каждый объект с уникальным URL должен иметь этот метод.

save(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)
# сохраняет запись в БД
# его часто переопределяют добавляя новое поведение, например валидацию, до сохранения объект в БД или после, как в декораторе.
# переопределенный метод не будет вызван при множественных операциях.


delete()
# удаление объекта



другие методы

https://djbook.ru/rel3.0/ref/models/instances.html#model-instance-methods








